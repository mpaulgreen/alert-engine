services:
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    environment:
      - REDIS_PASSWORD=testpass
    command: redis-server --requirepass testpass
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "testpass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2182:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper-test:
        condition: service_healthy
    ports:
      - "9093:9092"
      - "29093:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_SEGMENT_BYTES: 1048576
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 30000
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - test-network

  # Create test topics
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka-test:
        condition: service_healthy
    command: |
      bash -c "
        # Wait for Kafka to be ready
        kafka-topics --bootstrap-server kafka-test:29092 --list
        
        # Create test topics
        kafka-topics --create --topic application-logs --bootstrap-server kafka-test:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic error-logs --bootstrap-server kafka-test:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic test-logs --bootstrap-server kafka-test:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic batch-logs --bootstrap-server kafka-test:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic performance-test --bootstrap-server kafka-test:29092 --partitions 3 --replication-factor 1 --if-not-exists
        
        echo 'Test topics created successfully'
        kafka-topics --bootstrap-server kafka-test:29092 --list
      "
    networks:
      - test-network

  # Go test runner service
  go-test:
    image: golang:1.23-alpine
    working_dir: /app
    volumes:
      - .:/app
    environment:
      CGO_ENABLED: 0
      GOOS: linux
      KAFKA_BROKERS: kafka-test:29092
      REDIS_ADDR: redis-test:6379
      REDIS_PASSWORD: testpass
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      redis-test:
        condition: service_healthy
    networks:
      - test-network

networks:
  test-network:
    driver: bridge 